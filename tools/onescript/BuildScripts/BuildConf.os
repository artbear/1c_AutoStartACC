#Использовать logos
#Использовать json

Перем Лог;


Функция ПрочитатьФайлВСтроку(ИмяФайла)
	ФайлПроверкаСуществования = Новый Файл(ИмяФайла);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		ВызватьИсключение("Файл " + ИмяФайла + " не существует!");
	КонецЕсли;


	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	Рез = "";

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;

		Рез = Рез + Стр + Символы.ПС;
	КонецЦикла;

	Текст.Закрыть();

	Возврат  Рез;
КонецФункции

Функция ПрочитатьФайлJSON(ИмяФайла)
	JsonСтрока  = ПрочитатьФайлВСтроку(ИмяФайла);
	ПарсерJSON  = Новый ПарсерJSON();
	Рез         = ПарсерJSON.ПрочитатьJSON(JsonСтрока);
	//ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(Рез);
	Рез.Вставить("ИмяФайлаСборки",ИмяФайла);
	Возврат Рез;
КонецФункции

Процедура ПроверитьОсновныеПараметрыНаКорректность(Параметры,ИмяФайла,EPFОригинал)
	Если Не ЗначениеЗаполнено(Параметры["ВерсияПлатформы"]) Тогда
		Стр = ИмяФайла + ". Не указан параметр ""ВерсияПлатформы""!";
		Лог.Ошибка(Стр);
		ВызватьИсключение(Стр);
	КонецЕсли;

	Если Параметры["ПользовательБазы"]=Неопределено Тогда
		Стр = ИмяФайла + ". Не указан параметр ""ПользовательБазы""!";
		Лог.Ошибка(Стр);
		ВызватьИсключение(Стр);
	КонецЕсли;
	Если Параметры["ПарольОтБазы"]=Неопределено Тогда
		Стр = ИмяФайла + ". Не указан параметр ""ПарольОтБазы""!";
		Лог.Ошибка(Стр);
		ВызватьИсключение(Стр);
	КонецЕсли;


	ФайлПроверкаСуществования = Новый Файл(EPFОригинал);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Лог.Ошибка("Файл " + EPFОригинал + " не существует!");
		Возврат;
	КонецЕсли;
КонецПроцедуры

Функция УбратьСлешСправа(Стр)
	Если Прав(Стр,1) = "\" Тогда
		Возврат Лев(Стр,СтрДлина(Стр)-1);
	КонецЕсли;
	Если Прав(Стр,1) = "/" Тогда
		Возврат Лев(Стр,СтрДлина(Стр)-1);
	КонецЕсли;

	Возврат Стр;
КонецФункции



Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт

	Результат = Новый Массив;

	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//

	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;

	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ДобавитьНулейДоНужнойДлинны(Знач Стр,Кол)
	Пока СтрДлина(Стр) < Кол Цикл
		Стр = "0" + Стр;
	КонецЦикла;

	Возврат Стр;
КонецФункции

Функция СоздатьСтрокуДляСортировкиВерсии(Стр)
	Рез = "";

	Массив = РазложитьСтрокуВМассивПодстрок(Стр,".");
	Для каждого Элем Из Массив Цикл
		Рез = Рез + ДобавитьНулейДоНужнойДлинны(Элем,7);
	КонецЦикла;

	Возврат Рез;
КонецФункции

Функция НайтиСамуюПозднююВерсиюПлатформыПоСтрокеПоиска(СтрокаПоискаВерсияПлатформы,КаталогПоискаВерсииПлатформы)

	ТаблицаВерсий = Новый ТаблицаЗначений;
	ТаблицаВерсий.Колонки.Добавить("Имя");
	ТаблицаВерсий.Колонки.Добавить("ДляСортировки");

	Файлы = НайтиФайлы(КаталогПоискаВерсииПлатформы,СтрокаПоискаВерсияПлатформы + "*",Истина);
	Для каждого Файл Из Файлы Цикл
		Если Не Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		СтрТаблицаВерсий     = ТаблицаВерсий.Добавить();
		СтрТаблицаВерсий.Имя = Файл.Имя;
		СтрТаблицаВерсий.ДляСортировки = СоздатьСтрокуДляСортировкиВерсии(СтрТаблицаВерсий.Имя);

	КонецЦикла;

	Если ТаблицаВерсий.Количество() = 0 Тогда
		Стр = "Не найдено ни одной версии по строке <" + СтрокаПоискаВерсияПлатформы + ">" + " в каталоге <" + КаталогПоискаВерсииПлатформы + ">";
		Лог.Ошибка(Стр);
		ВызватьИсключение(Стр);
	КонецЕсли;

	ТаблицаВерсий.Сортировать("ДляСортировки убыв");

	Рез = УбратьСлешСправа(КаталогПоискаВерсииПлатформы) + "\" +  ТаблицаВерсий[0].Имя + "\bin\1cv8.exe";

	Возврат """" + Рез + """";
КонецФункции

Функция СоздатьВременныйКаталог()
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременногоФайла);

	Возврат ИмяВременногоФайла;
КонецФункции

Процедура ОчиститьКаталог(Каталог)
	ФайлПроверкаСуществования = Новый Файл(Каталог);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Возврат;;
	КонецЕсли;


	Файлы = НайтиФайлы(Каталог,"*");
	Для каждого Файл Из Файлы Цикл
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЦикла;

КонецПроцедуры

Процедура РаспаковатьEPF(ПутьК1С,ИмяФайлаEPF,КаталогРаспаковки,ОсновныеПараметры)
	Лог.Информация("Распаковка " + ИмяФайлаEPF);

	ОчиститьКаталог(КаталогРаспаковки);

	КаталогТемп=СоздатьВременнуюБазу(ПутьК1с);
	СтрокаПодключенияКБазе="/F"+КаталогТемп;
	Команда = ПутьК1С + " DESIGNER " + СтрокаПодключенияКБазе + " /DumpExternalDataProcessorOrReportToFiles """ + КаталогРаспаковки + """ """ + ИмяФайлаEPF + """";
	retCode = -1;
	ЗапуститьПриложение(Команда,,Истина,retCode);
	Если retCode <> 0 Тогда
		Лог.Ошибка("Не смог распаковать <" + ИмяФайлаEPF + "> в <" + КаталогРаспаковки + ">: " + retCode);
		ЗавершитьРаботу(1);
	КонецЕсли;

	Файлы = НайтиФайлы(КаталогРаспаковки,"*");
	Если Файлы.Количество() = 0 Тогда
		ВызватьИсключение("Не найдены файлы после распаковки " + ИмяФайлаEPF);
	КонецЕсли;

КонецПроцедуры

Функция СоздатьВременнуюБазу(ПутьК1С)
	Каталогбазы = СоздатьВременныйКаталог();

	Команда = ПутьК1С + " CREATEINFOBASE ""File=" + Каталогбазы + ";""";


	retCode = -1;
	ЗапуститьПриложение(Команда,,Истина,retCode);
	Если retCode <> 0 Тогда
		Лог.Ошибка("Не смог создать временную базу! retCode=" + retCode);
		ЗавершитьРаботу(1);
	КонецЕсли;

	Возврат Каталогбазы;
КонецФункции

Функция РаспаковатьБазуНаИсходники(ПутьК1С,КаталогБазы)
	КаталогИсходников = СоздатьВременныйКаталог();

	//КаталогИсходников = "c:\temp\333";

	ОчиститьКаталог(КаталогИсходников);
	
	Команда = ПутьК1С + " DESIGNER /F" + КаталогБазы + " /DumpConfigToFiles " + КаталогИсходников;
	
	retCode = -1;
	ЗапуститьПриложение(Команда,,Истина,retCode);
	Если retCode <> 0 Тогда
		Лог.Ошибка("Не смог выгрузить исходники. retCode=" + retCode);
		ЗавершитьРаботу(1);
	КонецЕсли;

	Возврат КаталогИсходников;
КонецФункции

Функция ПолучитьИмяОбработкиИзКаталогEPF(КаталогEPF)
	ФайлПроверкаСуществования = Новый Файл(КаталогEPF);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Лог.Ошибка("Каталог " + КаталогEPF + " не существует!");
		ВызватьИсключение("Каталог " + КаталогEPF + " не существует!");
	КонецЕсли;


	Файлы = НайтиФайлы(КаталогEPF,"*.xml",Ложь);
	Для каждого Файл Из Файлы Цикл
		Возврат Файл.ИмяБезРасширения;
	КонецЦикла;

	ВызватьИсключение("Не смог получить имя обработки из каталога " + КаталогEPF);

КонецФункции

Процедура СкопироватьКаталогСоВсемиФайламииПодкаталогами(Откуда,Куда)
	ТаблицаКаталогов = Новый ТаблицаЗначений;
	ТаблицаКаталогов.Колонки.Добавить("Путь");
	ТаблицаКаталогов.Колонки.Добавить("СтрДлина");

	Файлы = НайтиФайлы(Откуда,"*",Истина);
	Для каждого Файл Из Файлы Цикл
		Если Не Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		СтрТаблицаКаталогов = ТаблицаКаталогов.Добавить();
		СтрТаблицаКаталогов.Путь     = Файл.ПолноеИмя;
		СтрТаблицаКаталогов.СтрДлина = СтрДлина(СтрТаблицаКаталогов.Путь);

	КонецЦикла;

	ТаблицаКаталогов.Сортировать("СтрДлина");
	//Для каждого СтрТаблицаКаталогов Из ТаблицаКаталогов Цикл
	//	Сообщить("" + СтрТаблицаКаталогов.Путь);
	//КонецЦикла;

	Для каждого СтрТаблицаКаталогов Из ТаблицаКаталогов Цикл
		НовыйПуть = Куда + Сред(СтрТаблицаКаталогов.Путь,СтрДлина(Откуда)+1);
		//Сообщить("Откуда="+Откуда);
		//Сообщить("СтрТаблицаКаталогов.Путь="+СтрТаблицаКаталогов.Путь);
		//Сообщить("Сред(СтрТаблицаКаталогов.Путь,СтрДлина(Откуда))="+Сред(СтрТаблицаКаталогов.Путь,СтрДлина(Откуда)));

		Файл = Новый Файл(НовыйПуть);
		Если Файл.Существует() Тогда
			Продолжить;
		КонецЕсли;

		СоздатьКаталог(НовыйПуть);
	КонецЦикла;

	Для каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		НовыйПуть = Куда + Сред(Файл.ПолноеИмя,СтрДлина(Откуда)+1);

		КопироватьФайл(Файл.ПолноеИмя,НовыйПуть);

	КонецЦикла;

КонецПроцедуры

Процедура СкопироватьИсходникиОбработкиВКаталогИсходников(КаталогИсходниковБазы,КаталогEPF)
	ИмяОбработки = ПолучитьИмяОбработкиИзКаталогEPF(КаталогEPF);

	//вставка в Configuration.xml

	КаталогИсходниковБазы = УбратьСлешСправа(КаталогИсходниковБазы);
	ПутьК_Configuration_xml = КаталогИсходниковБазы + "\" + "Configuration.xml";

	ФайлПроверкаСуществования = Новый Файл(ПутьК_Configuration_xml);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Сообщить("Файл " + ПутьК_Configuration_xml + " не существует!");
		Возврат;
	КонецЕсли;

	ВременныйФайл_xml = ПолучитьИмяВременногоФайла("xml");


	ЗТ = Новый ЗаписьТекста(ВременныйФайл_xml,"UTF-8",,Истина);

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьК_Configuration_xml,"UTF-8");

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;


		Если СокрЛП(Стр) = "</ChildObjects>" Тогда
			ЗТ.ЗаписатьСтроку("			<DataProcessor>" + ИмяОбработки + "</DataProcessor>");
		КонецЕсли;

		ЗТ.ЗаписатьСтроку(Стр);



	КонецЦикла;

	Текст.Закрыть();
	ЗТ.Закрыть();

	КопироватьФайл(ВременныйФайл_xml,ПутьК_Configuration_xml);

	//копирование самой обработки

	КаталогОбработок = КаталогИсходниковБазы + "\DataProcessors";

	ФайлПроверкаСуществования = Новый Файл(КаталогОбработок);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		СоздатьКаталог(ФайлПроверкаСуществования.ПолноеИмя);
	КонецЕсли;

	СкопироватьКаталогСоВсемиФайламииПодкаталогами(КаталогEPF,КаталогОбработок);
КонецПроцедуры

Процедура ЗагрузитьВБазуКонфигурациюИзКаталога(ПутьК1С,СтрокаПодключенияКБазе,КаталогИсходниковБазы)
	Команда = ПутьК1С + " DESIGNER " + СтрокаПодключенияКБазе + " /LoadConfigFromFiles  " + КаталогИсходниковБазы +" /UpdateDBCfg";
	
	retCode = -1;
	ЗапуститьПриложение(Команда,,Истина,retCode);
	Если retCode <> 0 Тогда
		Лог.Ошибка("Не смог загрузить исходники. retCode=" + retCode);
		ЗавершитьРаботу(1);
	КонецЕсли;
КонецПроцедуры

Процедура ОбрабатьXML_EPF_Из_cf_в_epf(КаталогEPF)
	Файлы = НайтиФайлы(КаталогEPF,"*.xml",Истина);
	Для каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;




		ВременныйФайл_xml = ПолучитьИмяВременногоФайла("xml");

		ЗТ = Новый ЗаписьТекста(ВременныйФайл_xml,"UTF-8",,Истина);
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя,"UTF-8");

		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;

			Стр = СтрЗаменить(Стр,"ExternalDataProcessor","DataProcessor");

			ЗТ.ЗаписатьСтроку(Стр);
		КонецЦикла;

		Текст.Закрыть();
		ЗТ.Закрыть();

		КопироватьФайл(ВременныйФайл_xml,Файл.ПолноеИмя);
	КонецЦикла;
КонецПроцедуры

Процедура СделатьИзмененияВXML_EPF(КаталогEPF)
	ИмяОбработки = ПолучитьИмяОбработкиИзКаталогEPF(КаталогEPF);

	Имя_XML = КаталогEPF + "\" + ИмяОбработки + ".xml";

	ФайлПроверкаСуществования = Новый Файл(Имя_XML);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Сообщить("Файл " + Имя_XML + " не существует!");
		Возврат;
	КонецЕсли;



	ВременныйФайл_xml = ПолучитьИмяВременногоФайла("xml");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл_xml,"UTF-8",,Истина);

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(Имя_XML,"UTF-8");

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;


		Стр = СтрЗаменить(Стр,"ExternalDataProcessor","DataProcessor");
		//Стр = СтрЗаменить(Стр,"name=""ExternalDataProcessorObject","name=""DataProcessorObject");

		Если СокрЛП(Стр) = "</xr:GeneratedType>" Тогда


			ЗТ.ЗаписатьСтроку(Стр);

			ЗТ.ЗаписатьСтроку("			<xr:GeneratedType name=""DataProcessorManager." + ИмяОбработки + """ category=""Manager"">");
			ЗТ.ЗаписатьСтроку("				<xr:TypeId>c3dc698e-1c07-4185-ac44-302f89ac8ef6</xr:TypeId>");
			ЗТ.ЗаписатьСтроку("				<xr:ValueId>df518e25-e686-4dd0-b1da-f17f4eeac0d1</xr:ValueId>");
			ЗТ.ЗаписатьСтроку("			</xr:GeneratedType>");

			Продолжить;
		КонецЕсли;


		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;

	Текст.Закрыть();
	ЗТ.Закрыть();

	КопироватьФайл(ВременныйФайл_xml,Имя_XML);
КонецПроцедуры

Процедура ЗагрузитьВБазуEPF(ПутьК1С,КаталогБазы,ПользовательБазы,ПарольОтБазы,КаталогEPF,ИмяИзначальногоФайлаEPF)
	Лог.Информация("Загрузка epf <" + ИмяИзначальногоФайлаEPF + "> во временную базу.");

	СделатьИзмененияВXML_EPF(КаталогEPF);
	ОбрабатьXML_EPF_Из_cf_в_epf(КаталогEPF);
	Врем=СоздатьВременнуюБазу(ПутьК1с);
	КаталогИсходниковБазы = РаспаковатьБазуНаИсходники(ПутьК1С,Врем);

	СкопироватьИсходникиОбработкиВКаталогИсходников(КаталогИсходниковБазы,КаталогEPF);
	СтрокаПодключенияКБазе = "/F"+Каталогбазы;
	Если ЗначениеЗаполнено(ПользовательБазы) Тогда
		СтрокаПодключенияКБазе=СтрокаПодключенияКБазе + " /N" + ПользовательБазы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПарольОтБазы) Тогда
		СтрокаПодключенияКБазе=СтрокаПодключенияКБазе + " /P" + ПарольОтБазы;
	КонецЕсли;
	ЗагрузитьВБазуКонфигурациюИзКаталога(ПутьК1С,СтрокаПодключенияКБазе,КаталогИсходниковБазы);

КонецПроцедуры

Функция ПолучитьCFИзБазы(ПутьК1С,КаталогБазы)
	Лог.Информация("Получение CF из временной базы.");

	ИмяВременногоCF = ПолучитьИмяВременногоФайла("cf");

	Команда = ПутьК1С + " DESIGNER /F" + КаталогБазы + " /DumpCfg  " + ИмяВременногоCF;
	//Сообщить("" + Команда);

	retCode = -1;
	ЗапуститьПриложение(Команда,,Истина,retCode);
	Если retCode <> 0 Тогда
		Лог.Ошибка("Не смог выгрузить cf. retCode=" + retCode);
		ЗавершитьРаботу(1);
	КонецЕсли;

	Возврат ИмяВременногоCF;
КонецФункции

Процедура ОбрабатьXML_EPF_Из_epf_в_cf(КаталогEPF)
	Файлы = НайтиФайлы(КаталогEPF,"*.xml",Истина);
	Для каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;




		ВременныйФайл_xml = ПолучитьИмяВременногоФайла("xml");

		ЗТ = Новый ЗаписьТекста(ВременныйФайл_xml,"UTF-8",,Истина);
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя,"UTF-8");

		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;

			Стр = СтрЗаменить(Стр,"DataProcessor","ExternalDataProcessor");

			ЗТ.ЗаписатьСтроку(Стр);
		КонецЦикла;

		Текст.Закрыть();
		ЗТ.Закрыть();

		КопироватьФайл(ВременныйФайл_xml,Файл.ПолноеИмя);
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьСкрипт(ОсновнойФайлПараметров, EPFОригинал, ИтоговаяБаза)

	ФайлEPFОригинал = Новый Файл(EPFОригинал);
	Если НЕ ФайлEPFОригинал.Существует() Тогда
		Сообщить("Файл " + EPFОригинал + " не существует!");
		Возврат;
	КонецЕсли;

	ОсновныеПараметры = ПрочитатьФайлJSON(ОсновнойФайлПараметров);

	ПроверитьОсновныеПараметрыНаКорректность(ОсновныеПараметры,ОсновнойФайлПараметров,EPFОригинал);

	КаталогПоискаВерсииПлатформы = ОсновныеПараметры["КаталогПоискаВерсииПлатформы"];
	Если КаталогПоискаВерсииПлатформы = Неопределено Тогда
		КаталогПоискаВерсииПлатформы = "C:\Program Files (x86)\1cv8";
	КонецЕсли;


	ПутьК1С        = НайтиСамуюПозднююВерсиюПлатформыПоСтрокеПоиска(ОсновныеПараметры["ВерсияПлатформы"],КаталогПоискаВерсииПлатформы);
	Лог.Информация("Найденная версия платформы:<" + ПутьК1С + ">");


	КаталогРаспаковкиEPFОригинал = СоздатьВременныйКаталог();
	Если ОсновныеПараметры["КаталогРаспаковкиEPFОригинал"] <> Неопределено Тогда
		КаталогРаспаковкиEPFОригинал = ОсновныеПараметры["КаталогРаспаковкиEPFОригинал"]; //для отладки
	КонецЕсли;


	//ОчиститьКаталог(КаталогРаспаковкиEPFОригинал);
	//ОчиститьКаталог(КаталогРаспаковкиEPFИзмененная);
	РаспаковатьEPF(ПутьК1С,EPFОригинал,КаталогРаспаковкиEPFОригинал,ОсновныеПараметры);

	ИмяОбработки = ПолучитьИмяОбработкиИзКаталогEPF(КаталогРаспаковкиEPFОригинал);
	ПользовательБазы = ОсновныеПараметры["ПользовательБазы"];
	ПарольОтБазы = ОсновныеПараметры["ПарольОтБазы"];
	ЗагрузитьВБазуEPF(ПутьК1С, ИтоговаяБаза, ПользовательБазы, ПарольОтБазы, КаталогРаспаковкиEPFОригинал, EPFОригинал);

	Лог.Информация("Обработка закончена.");
КонецПроцедуры

Лог = Логирование.ПолучитьЛог("buildconf.run.log");

Лог.Информация("" + ТекущаяДата() + ". Запуск скрипта...");

Если АргументыКоманднойСтроки.Количество() <> 3 Тогда
	Лог.Ошибка("Не верно переданы параметры! Должно быть: json, epf, base");
	ЗавершитьРаботу(1);
Иначе
	ВыполнитьСкрипт(АргументыКоманднойСтроки[0],АргументыКоманднойСтроки[1]+".epf",АргументыКоманднойСтроки[2]);
КонецЕсли;
